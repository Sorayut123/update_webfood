const express = require("express");
const router = express.Router();
const db = require("../../config/db");
const { verifyToken, isOwner } = require("../../middleware/auth");

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô
router.use(verifyToken, isOwner);



// ‡∏≠‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
// router.get("/all", verifyToken, isOwner, async (req, res) => {
//   try {
//     const [rows] = await db.promise().query("SELECT * FROM orders"); // ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ
//     res.json({ orders: rows });
//   } catch (error) {
//     console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backend:", error);
//     res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
//   }
// });


// // ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
// router.get("/all", verifyToken, isOwner, async (req, res) => {
//   try {
//     const today = new Date().toLocaleDateString("sv-SE", { timeZone: "Asia/Bangkok" });

//     const [rows] = await db.promise().query(
//       `SELECT * FROM orders 
//        WHERE DATE(order_time) = ?`,
//       [today]
//     );

//     res.json({ orders: rows });
//   } catch (error) {
//     console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backend:", error);
//     res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
//   }
// });

router.get("/table/:tableNumber", verifyToken, async (req, res) => {
  try {
    const today = new Date().toLocaleDateString("sv-SE", { timeZone: "Asia/Bangkok" });
    const tableNumber = req.params.tableNumber;

    const [rows] = await db.promise().query(
      `SELECT * FROM orders 
       WHERE DATE(order_time) = ? AND table_number = ?`,
      [today, tableNumber]
    );

    res.json({ orders: rows });
  } catch (error) {
    console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backend:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
});


// router.get("/by-table/:table_number", async (req, res) => {
//   const tableNumber = req.params.table_number;
//   try {
//     const [orders] = await db.promise().query(
//       `SELECT * FROM orders WHERE table_number = ? ORDER BY created_at DESC`,
//       [tableNumber]
//     );
//     res.json(orders);
//   } catch (err) {
//     res.status(500).json({ error: "Server error" });
//   }
// });


router.get('/count', verifyToken, isOwner, async (req, res) => {
  try {
    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD (Asia/Bangkok)
    const today = new Date().toLocaleDateString('sv-SE', { timeZone: 'Asia/Bangkok' });

    // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà completed ‡∏´‡∏£‡∏∑‡∏≠ cancelled
    const [rows] = await db.promise().query(`
      SELECT COUNT(*) AS count
      FROM orders
      WHERE DATE(CONVERT_TZ(order_time, '+00:00', '+07:00')) = ?
        AND status NOT IN ('completed', 'cancelled')
    `, [today]);

    const count = rows?.[0]?.count ?? 0;

    // ‡∏™‡πà‡∏á event ‡πÅ‡∏à‡πâ‡∏á client ‡∏ú‡πà‡∏≤‡∏ô socket.io (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const io = req.app.get("io");
    if (io) {
      io.emit("orderCountUpdated", { count });
    }

    // ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö client
    return res.json({ count });
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    return res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ' });
  }
});


// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
router.get("/today-revenue", verifyToken, isOwner, async (req, res) => {
  try {
    // ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ Format YYYY-MM-DD
    const today = new Date().toLocaleDateString("sv-SE", { timeZone: "Asia/Bangkok" });

    const [result] = await db.promise().query(
      `SELECT 
        COALESCE(SUM(total_price), 0) AS totalRevenue,
        COUNT(*) AS totalOrders
      FROM orders
      WHERE DATE(order_time) = ?
        AND status = 'completed'`,
      [today]
    );

    res.json({
      totalRevenue: parseFloat(result[0].totalRevenue) || 0,
      totalOrders: result[0].totalOrders,
      date: new Date().toLocaleDateString("th-TH"),
    });
  } catch (err) {
    console.error("Database error:", err);
    res.status(500).json({
      message: "‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
      error: err.message,
    });
  }
});




router.get("/:orderId", verifyToken, isOwner, async (req, res) => {
  const orderId = req.params.orderId;
  
  // console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:", orderId);
  
  if (!orderId || isNaN(orderId)) {
    return res.status(400).json({ 
      message: "‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      success: false 
    });
  }

  try {
    // ‡πÉ‡∏ä‡πâ LEFT JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ menu
    const [results] = await db.promise().query(
      `SELECT 
         oi.item_id,
         oi.order_id,
         oi.menu_id,
         COALESCE(m.menu_name, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π') as menu_name,
         oi.quantity,
         oi.note,
         oi.specialRequest,
         oi.price,
         (oi.quantity * oi.price) as subtotal
       FROM order_items oi
       LEFT JOIN menu m ON oi.menu_id = m.menu_id
       WHERE oi.order_id = ?
       ORDER BY oi.item_id`,
      [orderId]
    );

    // console.log("‚úÖ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£ query:", results);

    if (results.length === 0) {
      return res.status(404).json({ 
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ",
        success: false 
      });
    }

    res.json({ 
      success: true,
      items: results,
      orderId: parseInt(orderId),
      totalItems: results.length
    });

  } catch (error) {
    console.error("üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô backend (orderId):", error);
    res.status(500).json({ 
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
      success: false,
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});



//2. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠

router.put("/:orderId/status", verifyToken, isOwner, async (req, res) => {
  const orderId = req.params.orderId;
  const { status } = req.body;

  try {
    const [result] = await db.promise().query(
      "UPDATE orders SET status = ? WHERE order_id = ?",
      [status, orderId]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö order ‡∏ô‡∏µ‡πâ" });
    }

    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" });
  }
});

// ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
// routes/owner/stats.js

module.exports = router;