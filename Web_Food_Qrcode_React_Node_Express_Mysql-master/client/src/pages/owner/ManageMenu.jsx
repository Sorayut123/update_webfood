import React, { useState, useEffect } from "react";
import { Plus, Edit2, Trash2, Save, X, Upload, Star } from "lucide-react";
import axios from "axios";
//‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏≥ modal
import toast from "react-hot-toast";

const API_URL = "http://localhost:3000/api/owner/menu"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á API
const API_URL_MENU_TYPE = "http://localhost:3000/api/owner/menu/menu_type"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á API
const API_URL_IMAGE = "http://localhost:3000/uploads/food"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á API

const ManageMenu = () => {
  const [menus, setMenus] = useState([]);
  const [menusType, setMenusType] = useState("");
  const [showForm, setShowForm] = useState(false);
  const [editingMenu, setEditingMenu] = useState(null);

  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [menuToDelete, setMenuToDelete] = useState(null);

  useEffect(() => {
    fetchMenu();
    fetchMenuType();
  }, []);

  // const fetchMenu = async () => {
  //   try {
  //     const response = await axios.get(API_URL);
  //     // console.log(response.data); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
  //     setMenus(response.data.menus || response.data || []); // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡∏à‡∏£‡∏¥‡∏á
  //   } catch (error) {
  //     console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:", error);
  //   }
  // };
  const fetchMenu = async () => {
    try {
      const response = await axios.get(API_URL);
      // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ API ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö { menus: [...] } ‡∏´‡∏£‡∏∑‡∏≠ [...direct array]
      const menusData = response.data.menus || response.data || [];
      setMenus(menusData);
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π:", error);
    }
  };

  const fetchMenuType = async () => {
    try {
      const response = await axios.get(API_URL_MENU_TYPE);
      // console.log(response.data); // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
      setMenusType(response.data.menus || response.data || []); // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡∏à‡∏£‡∏¥‡∏á
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:", error);
    }
  };

  const [formData, setFormData] = useState({
    menu_name: "",
    menu_image: "",
    price: "",
    special: false,
    detail_menu: "",
    menu_type_id: "", // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
  });

  const resetForm = () => {
    setFormData({
      menu_name: "",
      menu_image: "",
      price: "",
      special: false,
      detail_menu: "",
      menu_type_id: 1,
    });
    setEditingMenu(null);
    setShowForm(false);
  };
  const handleSubmit = async () => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!formData.menu_name || !formData.price) {
      toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤", {
        duration: 3000,
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á menu_type_id
    if (!formData.menu_type_id) {
      toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏ô‡∏π", {
        duration: 3000,
      });
      return;
    }

    const menuTypeId = parseInt(formData.menu_type_id, 10);
    if (isNaN(menuTypeId)) {
      toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏ô‡∏π", {
        duration: 3000,
      });
      return;
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UPDATE ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ FormData ‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå (‡∏´‡∏£‡∏∑‡∏≠ oldImage)
    const form = new FormData();
    form.append("menu_name", formData.menu_name.trim());
    form.append("price", parseFloat(formData.price).toString());
    form.append("special", formData.special ? "1" : "0");
    form.append("detail_menu", formData.detail_menu?.trim() || "");
    form.append("menu_type_id", menuTypeId.toString());

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    if (formData.menu_image_file instanceof File) {
      form.append("menu_image", formData.menu_image_file);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏™‡πà‡∏á oldImage ‡∏î‡πâ‡∏ß‡∏¢
    if (editingMenu && editingMenu.menu_image) {
      form.append("oldImage", editingMenu.menu_image);
    }

    // Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á
    console.log("=== Debug Form Data ===");
    for (let pair of form.entries()) {
      console.log(`${pair[0]}:`, pair[1], typeof pair[1]);
    }

    try {
      if (editingMenu) {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UPDATE - ‡πÉ‡∏ä‡πâ PUT method
        await axios.put(
          `http://localhost:3000/api/owner/menu/${editingMenu.menu_id}`,
          form,
          {
            headers: { "Content-Type": "multipart/form-data" },
          }
        );
        toast.success("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CREATE - ‡πÉ‡∏ä‡πâ POST method
        await axios.post("http://localhost:3000/api/owner/menu", form, {
          headers: { "Content-Type": "multipart/form-data" },
        });
        toast.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }

      fetchMenu(); // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
      resetForm(); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°
    } catch (error) {
      console.error(
        "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ô‡∏π:",
        error?.response?.data || error.message
      );

      // ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
      const errorMessage =
        error?.response?.data?.error ||
        error?.response?.data?.message ||
        "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏ô‡∏π";
      toast.error(errorMessage);
    }
  };

  const handleEdit = (menu) => {
    setFormData({
      menu_name: menu.menu_name,
      menu_image: menu.menu_image, // ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      menu_image_file: menu.menu_image, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
      price: menu.price.toString(),
      special: menu.special, // true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1 (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü), false ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0
      detail_menu: menu.detail_menu,
      menu_type_id: menu.menu_type_id.toString(), // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string
    });
    setEditingMenu(menu);
    setShowForm(true);
  };

  const handleDelete = async (menuId) => {
    try {
      const response = await fetch(
        `http://localhost:3000/api/owner/menu/${menuId}`,
        {
          method: "DELETE",
        }
      );

      if (!response.ok) throw new Error("‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");

      setMenus(menus.filter((menu) => menu.menu_id !== menuId));
      toast.success("‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π: " + error.message);
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleFileChange ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  const handleFileChange = (e) => {
    if (e.target.files.length > 0) {
      setFormData((prev) => ({
        ...prev,
        menu_image_file: e.target.files[0], // ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ‡πÉ‡∏ô formData
      }));
      console.log("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå:", e.target.files[0]);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 to-orange-100 p-4">
      <div className="max-w-9xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-xl mb-6 p-6 border-l-4 border-orange-500">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 mb-2">
                ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
              </h1>
              <p className="text-gray-600">‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô</p>
            </div>
            <button
              onClick={() => setShowForm(true)}
              className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-6 py-3 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-200 flex items-center gap-2"
            >
              <Plus size={20} />
              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
            </button>
          </div>
        </div>

        {/* Form Modal */}
        {showForm && (
          <div
            className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center z-50 p-4"
            onClick={() => resetForm()} // üü† ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á = ‡∏õ‡∏¥‡∏î
          >
            <div
              className="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
              onClick={(e) => e.stopPropagation()} // üõë ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏∞‡∏•‡∏∏ Modal
            >
              <div className="p-6 border-b border-gray-200">
                <div className="flex justify-between items-center">
                  <h2 className="text-2xl font-bold text-gray-800">
                    {/* {editingMenu ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà"} */}
                  </h2>
                  <button
                    onClick={resetForm}
                    className="text-gray-500 hover:text-gray-700 transition-colors"
                  >
                    <X size={24} />
                  </button>
                </div>
              </div>

              <div className="p-6 space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π *
                    </label>
                    <input
                      type="text"
                      value={formData.menu_name}
                      onChange={(e) =>
                        setFormData({ ...formData, menu_name: e.target.value })
                      }
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all"
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó) *
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      value={formData.price}
                      onChange={(e) =>
                        setFormData({ ...formData, price: e.target.value })
                      }
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all"
                      placeholder="0.00"
                      required
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏ô‡∏π
                  </label>
                  <select
                    value={formData.menu_type_id || ""}
                    onChange={(e) => {
                      const value = e.target.value;
                      setFormData({
                        ...formData,
                        menu_type_id: value === "" ? "" : parseInt(value, 10),
                      });
                    }}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all"
                  >
                    <option value="" disabled>
                      ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏ô‡∏π
                    </option>
                    {menusType.map((type) => (
                      <option key={type.menu_type_id} value={type.menu_type_id}>
                        {type.type_name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏ô‡∏π
                  </label>
                  <div className="flex items-center gap-4">
                    <label className="bg-orange-100 hover:bg-orange-200 text-orange-600 px-4 py-3 rounded-xl transition-colors flex items-center gap-2 cursor-pointer">
                      <Upload size={18} />
                      ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î
                      <input
                        type="file"
                        accept="image/*"
                        className="hidden"
                        onChange={handleFileChange}
                      />
                    </label>

                    {/* {formData.menu_image_file && (
        <div className="text-sm text-gray-700">
          ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {formData.menu_image_file.name} (
          {(formData.menu_image_file.size / 1024).toFixed(2)} KB)
        </div>
      )} */}
                    {formData.menu_image_file && (
                      <div className="text-sm text-gray-700">
                        {typeof formData.menu_image_file === "string" ? (
                          <>‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°: {formData.menu_image_file}</>
                        ) : (
                          <>
                            ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: {formData.menu_image_file.name} (
                            {(formData.menu_image_file.size / 1024).toFixed(2)}{" "}
                            KB)
                          </>
                        )}
                      </div>
                    )}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏ô‡∏π
                  </label>
                  <textarea
                    value={formData.detail_menu}
                    onChange={(e) =>
                      setFormData({ ...formData, detail_menu: e.target.value })
                    }
                    rows={4}
                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all resize-none"
                    placeholder="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π ‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥..."
                  />
                </div>

                <div className="flex items-center gap-3">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">
                      ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏ô‡∏π
                    </label>
                    <select
                      name="special"
                      value={formData.special ? "1" : "0"} // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏î‡∏µ ‡πÜ
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          special: e.target.value === "1",
                        })
                      }
                     className="w-full px-3 py-2 border border-gray-300 rounded-md bg-white text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="1" className="text-gray-600">
                        ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü
                      </option>
                      <option value="0" className="text-gray-600">
                        ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü
                      </option>
                    </select>
                  </div>
                </div>

                <div className="flex gap-4 pt-6 border-t border-gray-200">
                  <button
                    type="button"
                    onClick={handleSubmit}
                    className="flex-1 bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white py-3 rounded-xl font-semibold shadow-lg transform hover:scale-105 transition-all duration-200 flex items-center justify-center gap-2"
                  >
                    <Save size={20} />
                    {editingMenu ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" : "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π"}
                  </button>
                  <button
                    type="button"
                    onClick={resetForm}
                    className="px-6 py-3 border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors font-semibold"
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Menu List */}
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden">
          <div className="p-6 bg-gradient-to-r from-orange-500 to-orange-600">
            <h2 className="text-xl font-bold text-white">
              ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({menus.length} ‡πÄ‡∏°‡∏ô‡∏π)
            </h2>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-orange-50">
                <tr>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    ‡∏£‡∏≤‡∏Ñ‡∏≤
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  </th>
                  <th className="px-6 py-4 text-left text-sm font-semibold text-gray-700">
                    ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                  </th>
                  <th className="px-6 py-4 text-center text-sm font-semibold text-gray-700">
                    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {menus.map((menu, index) => (
                  <tr
                    key={menu.menu_id}
                    className={`hover:bg-orange-50 transition-colors ${
                      index % 2 === 0 ? "bg-white" : "bg-gray-50"
                    }`}
                  >
                    <td className="px-6 py-4">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 rounded-xl overflow-hidden">
                          {menu.menu_image ? (
                            <img
                              src={`${API_URL_IMAGE}/${menu.menu_image}`}
                              // ‚úÖ ‡∏•‡∏ö /public ‡∏≠‡∏≠‡∏Å
                              alt={menu.menu_name}
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <div className="w-full h-full bg-gradient-to-br from-orange-200 to-orange-300 flex items-center justify-center">
                              <span className="text-orange-600 font-bold text-lg">
                                {menu.menu_name.charAt(0)}
                              </span>
                            </div>
                          )}
                        </div>

                        <div>
                          <p className="font-semibold text-gray-800">
                            {menu.menu_name}
                          </p>
                          <p className="text-sm text-gray-500">
                            ID: {menu.menu_id}
                          </p>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 text-gray-600">
                      {menu.menu_type_name}
                    </td>
                    <td className="px-6 py-4">
                      <span className="text-lg font-bold text-orange-600">
                        {typeof menu.price === "number"
                          ? menu.price.toFixed(2)
                          : !isNaN(parseFloat(menu.price))
                          ? parseFloat(menu.price).toFixed(2)
                          : "0.00"}{" "}
                        ‡∏ø
                      </span>
                    </td>

                    <td className="px-6 py-4">
                      {menu.special === 1 ? (
                        <span className="inline-flex items-center gap-1 px-3 py-1 rounded-full text-xs font-semibold bg-gradient-to-r from-orange-100 to-yellow-100 text-orange-700 border border-orange-200">
                          ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü
                        </span>
                      ) : (
                        <span className="inline-flex px-3 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-600">
                          ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4">
                      <p
                        className="text-sm text-gray-600 max-w-xs truncate"
                        title={menu.detail_menu}
                      >
                        {menu.detail_menu || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"}
                      </p>
                    </td>
                    <td className="px-6 py-4">
                      <div className="flex items-center justify-center gap-2">
                        <button
                          onClick={() => handleEdit(menu)}
                          className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-lg transition-colors shadow-md transform hover:scale-105"
                          title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                        >
                          <Edit2 size={16} />
                        </button>
                        <button
                          onClick={() => {
                            setMenuToDelete(menu.menu_id);
                            setShowDeleteModal(true);
                          }}
                          className="bg-red-500 hover:bg-red-600 text-white p-2 rounded-lg transition-colors shadow-md transform hover:scale-105"
                          title="‡∏•‡∏ö"
                        >
                          <Trash2 size={16} />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {menus.length === 0 && (
            <div className="text-center py-12">
              <div className="text-6xl mb-4">üçΩÔ∏è</div>
              <p className="text-gray-500 text-lg">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
              <p className="text-gray-400">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
            </div>
          )}
        </div>
      </div>
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black/40  flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl shadow-2xl w-full max-w-md p-6">
            <h2 className="text-xl font-bold text-gray-800 mb-4">
              ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π
            </h2>
            <p className="text-gray-600 mb-6">
              ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ?
              ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ
            </p>

            <div className="flex justify-end gap-3">
              <button
                onClick={() => setShowDeleteModal(false)}
                className="px-4 py-2 rounded-xl border border-gray-300 text-gray-700 hover:bg-gray-100"
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              <button
                onClick={async () => {
                  await handleDelete(menuToDelete);
                  setShowDeleteModal(false);
                }}
                className="px-4 py-2 rounded-xl bg-red-500 hover:bg-red-600 text-white font-semibold"
              >
                ‡∏•‡∏ö‡πÄ‡∏°‡∏ô‡∏π
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManageMenu;
